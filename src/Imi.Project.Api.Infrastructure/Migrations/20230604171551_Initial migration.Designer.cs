// <auto-generated />
using System;
using Imi.Project.Api.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Imi.Project.Api.Infrastructure.Migrations
{
    [DbContext(typeof(IMIDbContext))]
    [Migration("20230604171551_Initial migration")]
    partial class Initialmigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Admin", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GroupId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Admin");

                    b.HasData(
                        new
                        {
                            GroupId = new Guid("00000000-0000-0000-0000-000000000001"),
                            UserId = "00000000-0000-0000-0000-000000000001"
                        },
                        new
                        {
                            GroupId = new Guid("00000000-0000-0000-0000-000000000001"),
                            UserId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            GroupId = new Guid("00000000-0000-0000-0000-000000000001"),
                            UserId = "00000000-0000-0000-0000-000000000003"
                        },
                        new
                        {
                            GroupId = new Guid("00000000-0000-0000-0000-000000000001"),
                            UserId = "00000000-0000-0000-0000-000000000004"
                        },
                        new
                        {
                            GroupId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = "00000000-0000-0000-0000-000000000011"
                        },
                        new
                        {
                            GroupId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = "00000000-0000-0000-0000-000000000010"
                        },
                        new
                        {
                            GroupId = new Guid("00000000-0000-0000-0000-000000000003"),
                            UserId = "00000000-0000-0000-0000-000000000001"
                        },
                        new
                        {
                            GroupId = new Guid("00000000-0000-0000-0000-000000000003"),
                            UserId = "00000000-0000-0000-0000-000000000009"
                        },
                        new
                        {
                            GroupId = new Guid("00000000-0000-0000-0000-000000000003"),
                            UserId = "00000000-0000-0000-0000-000000000008"
                        },
                        new
                        {
                            GroupId = new Guid("00000000-0000-0000-0000-000000000003"),
                            UserId = "00000000-0000-0000-0000-000000000007"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasApprovedTermsAndConditions")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastOnline")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2001, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "d079109c-9578-4dad-a647-2a90e7875ed9",
                            Email = "Qiandro.claeys@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Qiandro",
                            HasApprovedTermsAndConditions = true,
                            LastName = "Claeys",
                            LastOnline = new DateTime(2023, 6, 4, 19, 15, 50, 793, DateTimeKind.Local).AddTicks(7749),
                            LockoutEnabled = false,
                            NormalizedEmail = "QIANDRO.CLAEYS@GMAIL.COM",
                            NormalizedUserName = "QIANDRO.CLAEYS@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENzAFE5dh6iXjD5xjAsKy3FOvqqPlxOIoTgTyoJvaiF9uGD5Om/lJqi6gfS/p4qIlg==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "4f7f1e2d-5992-4574-934d-bcfb36c9bc74",
                            TwoFactorEnabled = false,
                            UserName = "Qiandro.claeys@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2003, 9, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "65498c2d-c1cb-470c-a806-bea5f7ad5a33",
                            Email = "Qienta.claeys@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Qienta",
                            HasApprovedTermsAndConditions = true,
                            LastName = "Claeys",
                            LastOnline = new DateTime(2023, 6, 4, 19, 15, 50, 793, DateTimeKind.Local).AddTicks(7802),
                            LockoutEnabled = false,
                            NormalizedEmail = "QIENTA.CLAEYS@GMAIL.COM",
                            NormalizedUserName = "QIENTA.CLAEYS@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEC802osVnDn4BzN6VJIvo7mw/k+s7wO1pF6CrfRDYaJGV7nCgh/XAROk2ESfFg9oeA==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "4f94e17a-d92c-4f99-8e29-f506b666aa5f",
                            TwoFactorEnabled = false,
                            UserName = "Qienta.claeys@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c1d8e1fd-3be7-459b-8e18-9648442efff2",
                            Email = "Taina.reubens@proximus.be",
                            EmailConfirmed = true,
                            FirstName = "Taina",
                            HasApprovedTermsAndConditions = true,
                            LastName = "Reubens",
                            LastOnline = new DateTime(2023, 6, 4, 19, 15, 50, 793, DateTimeKind.Local).AddTicks(7830),
                            LockoutEnabled = false,
                            NormalizedEmail = "TAINA.REUBENS@PROXIMUS.BE",
                            NormalizedUserName = "TAINA.REUBENS@PROXIMUS.BE",
                            PasswordHash = "AQAAAAEAACcQAAAAECHHFtCrGCba9pQkhuOyiZ/FaEYT2JtMmNKkZmSR0hhh2b5MtgEdaxlEgqzavonH4Q==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "4edb37c4-f95d-41cd-9f0e-a97ebf4f67d7",
                            TwoFactorEnabled = false,
                            UserName = "Taina.reubens@proximus.be"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "ff4f715f-dbd6-4038-a70e-29f92f7b3313",
                            Email = "Gianni.claeys@proximus.be",
                            EmailConfirmed = true,
                            FirstName = "Gianni",
                            HasApprovedTermsAndConditions = true,
                            LastName = "Claeys",
                            LastOnline = new DateTime(2023, 6, 4, 19, 15, 50, 793, DateTimeKind.Local).AddTicks(7845),
                            LockoutEnabled = false,
                            NormalizedEmail = "GIANNI.CLAEYS@PROXIMUS.BE",
                            NormalizedUserName = "GIANNI.CLAEYS@PROXIMUS.BE",
                            PasswordHash = "AQAAAAEAACcQAAAAEMRvOTolLDJxQv04mG7yTz7vQ/PayDKjTGBqcdY/8L2wtL2chwesWxSP4HkoB4gLLg==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "75f40e67-128d-4b90-af6e-f39e6ca6584f",
                            TwoFactorEnabled = false,
                            UserName = "Gianni.claeys@proximus.be"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000005",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "295274b5-b76b-43f3-a152-7b5b0e211f71",
                            Email = "Joeri.Versyck@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Joeri",
                            HasApprovedTermsAndConditions = true,
                            LastName = "Versyck",
                            LastOnline = new DateTime(2023, 6, 4, 19, 15, 50, 793, DateTimeKind.Local).AddTicks(7857),
                            LockoutEnabled = false,
                            NormalizedEmail = "JOERI.VERSYCK@GMAIL.COM",
                            NormalizedUserName = "JOERI.VERSYCK@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHLUCRAmyA73LAdxljrvoNeBaKyNT4E+YrXnQijJCqK0zatJEy3RinueV7zpwL4njw==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "149c48a7-3074-439a-abfe-2881b9b2e480",
                            TwoFactorEnabled = false,
                            UserName = "Joeri.Versyck@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000006",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1998, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "fa1d81c0-d7f9-4d2d-accf-20ba9a760dbd",
                            Email = "Kevin.Rooseboom@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kevin",
                            HasApprovedTermsAndConditions = true,
                            LastName = "Rooseboom",
                            LastOnline = new DateTime(2023, 6, 4, 19, 15, 50, 793, DateTimeKind.Local).AddTicks(7874),
                            LockoutEnabled = false,
                            NormalizedEmail = "KEVIN.ROOSEBOOM@GMAIL.COM",
                            NormalizedUserName = "KEVIN.ROOSEBOOM@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFGxEhE5aRqlgOdqY86RHhgdONJK98/EJYWMU/rqO40Dhsd6N1PpHOdLaHIHsSJ+Vw==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "96036117-f89f-402f-86aa-36934ee975b9",
                            TwoFactorEnabled = false,
                            UserName = "Kevin.Rooseboom@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000007",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "f5e873f6-8c6e-4201-81a4-4708454154bb",
                            Email = "Lieven.Geryl@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Lieven",
                            HasApprovedTermsAndConditions = true,
                            LastName = "Geryl",
                            LastOnline = new DateTime(2023, 6, 4, 19, 15, 50, 793, DateTimeKind.Local).AddTicks(7887),
                            LockoutEnabled = false,
                            NormalizedEmail = "LIEVEN.GERYL@GMAIL.COM",
                            NormalizedUserName = "LIEVEN.GERYL@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENtrrQkIIA3PwLE1MbBhL5whDHwKQK3N0Q4zci0piHQiLWTPqkeoPha2+wlp7Ay8fg==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "4e9601ca-c2b4-4aaa-a1bb-093b88d69b3a",
                            TwoFactorEnabled = false,
                            UserName = "Lieven.Geryl@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000008",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "5f5e43d9-6416-48e7-b7fc-36f60e1a7dbe",
                            Email = "Miblan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Michiel",
                            HasApprovedTermsAndConditions = true,
                            LastName = "Blancquaert",
                            LastOnline = new DateTime(2023, 6, 4, 19, 15, 50, 793, DateTimeKind.Local).AddTicks(7903),
                            LockoutEnabled = false,
                            NormalizedEmail = "MIBLAN@GMAIL.COM",
                            NormalizedUserName = "MIBLAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJU+KQxTTVPRXMME784Nz6WO8GjJAVCOuQKVzeYS3QCEKSDgBlxiYSsIthp4mqO6sw==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "4f0f1876-7f6b-4950-a088-ee9cd21a4b24",
                            TwoFactorEnabled = false,
                            UserName = "Miblan@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000009",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "e9c0425b-7b05-4628-8e31-8f1c7ae7a8bc",
                            Email = "Ashley.Senaeve@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ashley",
                            HasApprovedTermsAndConditions = true,
                            LastName = "Senaeve",
                            LastOnline = new DateTime(2023, 6, 4, 19, 15, 50, 793, DateTimeKind.Local).AddTicks(7916),
                            LockoutEnabled = false,
                            NormalizedEmail = "ASHLEY.SENAEVE@GMAIL.COM",
                            NormalizedUserName = "ASHLEY.SENAEVE@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECjprtiPgGyZ01ZJITSS1zk8XgI1xtvMzyEB8qX/x7RXqlj3lR66xHbhioCkk0+F+w==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "b7cebd4b-7f56-49dd-89ab-4bcdb011ef3a",
                            TwoFactorEnabled = false,
                            UserName = "Ashley.Senaeve@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000010",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "606a91e7-867c-45f2-a606-34fa6739225b",
                            Email = "Kim.Sabbe@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kimberly",
                            HasApprovedTermsAndConditions = true,
                            LastName = "Sabbe",
                            LastOnline = new DateTime(2023, 6, 4, 19, 15, 50, 793, DateTimeKind.Local).AddTicks(7929),
                            LockoutEnabled = false,
                            NormalizedEmail = "KIM.SABBE@GMAIL.COM",
                            NormalizedUserName = "KIM.SABBE@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHSuc3GnQEr1v/F20W1OVz13dfL8YNpWBbfJhE1WiB4qsgwk6ykVz3nhGg8XA5EwXg==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "82aca335-87b9-478a-8eed-2b6e196fe5e4",
                            TwoFactorEnabled = false,
                            UserName = "Kim.sabbe@GMAIL.COM"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000011",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "1a5cb8ec-41db-4abd-a878-45fcf51fbfa8",
                            Email = "Damien.Maddens@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Damien",
                            HasApprovedTermsAndConditions = true,
                            LastName = "Maddens",
                            LastOnline = new DateTime(2023, 6, 4, 19, 15, 50, 793, DateTimeKind.Local).AddTicks(7944),
                            LockoutEnabled = false,
                            NormalizedEmail = "DAMIEN.MADDENS@GMAIL.COM",
                            NormalizedUserName = "DAMIEN.MADDENS@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJTy4N8Qcbmzfm+gkL9e/ymmVbZSo7djuxoK0Bq50VXBhYX6vP5GvVBkLH6pVFJJCQ==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "87b70b69-9383-4209-b86f-e347ad65b3b0",
                            TwoFactorEnabled = false,
                            UserName = "Damien.maddens@GMAIL.COM"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000012",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "832ab9e8-e176-4552-b485-12138d89d717",
                            Email = "user@imi.be",
                            EmailConfirmed = true,
                            FirstName = "Imi",
                            HasApprovedTermsAndConditions = true,
                            LastName = "User",
                            LastOnline = new DateTime(2023, 6, 4, 19, 15, 50, 793, DateTimeKind.Local).AddTicks(7958),
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@IMI.BE",
                            NormalizedUserName = "USER@IMI.BE",
                            PasswordHash = "AQAAAAEAACcQAAAAEES9bKShLnpTZNM/VVhx6FZuQxlZQmapweEdZJUgDjLnpaRVAmrNgoaJlxEeNgE1gA==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "d40fe828-2b59-4690-8784-a802b112168e",
                            TwoFactorEnabled = false,
                            UserName = "user@imi.be"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000013",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "9033f80d-900c-461d-b2d9-0bb1165675d2",
                            Email = "refuser@imi.be",
                            EmailConfirmed = true,
                            FirstName = "Imi",
                            HasApprovedTermsAndConditions = false,
                            LastName = "Refuser",
                            LastOnline = new DateTime(2023, 6, 4, 19, 15, 50, 793, DateTimeKind.Local).AddTicks(7972),
                            LockoutEnabled = false,
                            NormalizedEmail = "REFUSER@IMI.BE",
                            NormalizedUserName = "REFUSER@IMI.BE",
                            PasswordHash = "AQAAAAEAACcQAAAAEAJEI+4qJFMMcQYfK330///EJ9Oo9GPWlwkc1Qbkf7ylCHg9/GocMxI7u2oFn5aF8A==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "ac1a3d91-007c-435c-9d3a-ea3f28cc0d8f",
                            TwoFactorEnabled = false,
                            UserName = "refuser@imi.be"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000014",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "6d6a11e0-3a93-45aa-a041-77334035f6a9",
                            Email = "admin@imi.be",
                            EmailConfirmed = true,
                            FirstName = "admin",
                            HasApprovedTermsAndConditions = true,
                            LastName = "admin",
                            LastOnline = new DateTime(2023, 6, 4, 19, 15, 50, 793, DateTimeKind.Local).AddTicks(8065),
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@IMI.BE",
                            NormalizedUserName = "ADMIN@IMI.BE",
                            PasswordHash = "AQAAAAEAACcQAAAAEFHCqHiSxE6EOF63qOdHdcA5GbORfsmn35CTO6EX6+cVoK/WVYErBXPAjJY/exEsdg==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "cc3ba9cb-79e2-4b8a-b860-f4b06657751b",
                            TwoFactorEnabled = false,
                            UserName = "admin@imi.be"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastEditedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EventId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("GroupId");

                    b.ToTable("events");

                    b.HasData(
                        new
                        {
                            EventId = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreationDate = new DateTime(2023, 6, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            CreatorId = "00000000-0000-0000-0000-000000000001",
                            Description = "We gaan met de familie naar plopsaland en tante gaat mee",
                            EndDate = new DateTime(2023, 8, 20, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            GroupId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Dagje Plopsaland",
                            StartDate = new DateTime(2023, 8, 20, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreationDate = new DateTime(2023, 6, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            CreatorId = "00000000-0000-0000-0000-000000000002",
                            Description = "Inspuiting voor qienta haar reuma",
                            EndDate = new DateTime(2023, 5, 3, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            GroupId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Inspuiting Qienta",
                            StartDate = new DateTime(2023, 5, 3, 13, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = new Guid("00000000-0000-0000-0000-000000000003"),
                            CreationDate = new DateTime(2023, 6, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            CreatorId = "00000000-0000-0000-0000-000000000001",
                            Description = "Film gaan kijken in kinepolis brugge",
                            EndDate = new DateTime(2023, 4, 29, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            GroupId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Name = "Cinema",
                            StartDate = new DateTime(2023, 4, 29, 14, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = new Guid("00000000-0000-0000-0000-000000000004"),
                            CreationDate = new DateTime(2023, 6, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            CreatorId = "00000000-0000-0000-0000-000000000005",
                            Description = "Aanwezig",
                            EndDate = new DateTime(2023, 4, 28, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            GroupId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Name = "les",
                            StartDate = new DateTime(2023, 4, 28, 8, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = new Guid("00000000-0000-0000-0000-000000000005"),
                            CreationDate = new DateTime(2023, 6, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            CreatorId = "00000000-0000-0000-0000-000000000006",
                            Description = "Aanwezig",
                            EndDate = new DateTime(2023, 4, 28, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            GroupId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Name = "les",
                            StartDate = new DateTime(2023, 4, 28, 8, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = new Guid("00000000-0000-0000-0000-000000000006"),
                            CreationDate = new DateTime(2023, 6, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            CreatorId = "00000000-0000-0000-0000-000000000007",
                            Description = "Aanwezig",
                            EndDate = new DateTime(2023, 4, 28, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            GroupId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Name = "les",
                            StartDate = new DateTime(2023, 4, 28, 8, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = new Guid("00000000-0000-0000-0000-000000000007"),
                            CreationDate = new DateTime(2023, 6, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            CreatorId = "00000000-0000-0000-0000-000000000008",
                            Description = "Aanwezig",
                            EndDate = new DateTime(2023, 4, 28, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            GroupId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Name = "les",
                            StartDate = new DateTime(2023, 4, 28, 8, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = new Guid("00000000-0000-0000-0000-000000000008"),
                            CreationDate = new DateTime(2023, 6, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            CreatorId = "00000000-0000-0000-0000-000000000001",
                            Description = "Aanwezig",
                            EndDate = new DateTime(2023, 4, 28, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            GroupId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Name = "les",
                            StartDate = new DateTime(2023, 4, 28, 8, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = new Guid("00000000-0000-0000-0000-000000000009"),
                            CreationDate = new DateTime(2023, 6, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            CreatorId = "00000000-0000-0000-0000-000000000009",
                            Description = "Aanwezig",
                            EndDate = new DateTime(2023, 4, 28, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            GroupId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Name = "les",
                            StartDate = new DateTime(2023, 4, 28, 8, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = new Guid("00000000-0000-0000-0000-000000000010"),
                            CreationDate = new DateTime(2023, 6, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            CreatorId = "00000000-0000-0000-0000-000000000001",
                            Description = "Smoking cue in torhout",
                            EndDate = new DateTime(2023, 4, 29, 20, 30, 0, 0, DateTimeKind.Unspecified),
                            GroupId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Name = "Biljart",
                            StartDate = new DateTime(2023, 4, 29, 17, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("groups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatorId = "00000000-0000-0000-0000-000000000001",
                            Img = "",
                            Name = "Familie Claeys"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatorId = "00000000-0000-0000-0000-000000000001",
                            Img = "",
                            Name = "Friends"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            CreatorId = "00000000-0000-0000-0000-000000000001",
                            Img = "",
                            Name = "PROG klas"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            CreatorId = "00000000-0000-0000-0000-000000000001",
                            Img = "",
                            Name = "Testgroep1"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            CreatorId = "00000000-0000-0000-0000-000000000001",
                            Img = "",
                            Name = "Testgroep2"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            CreatorId = "00000000-0000-0000-0000-000000000001",
                            Img = "",
                            Name = "Testgroep3"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            CreatorId = "00000000-0000-0000-0000-000000000001",
                            Img = "",
                            Name = "Testgroep4"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            CreatorId = "00000000-0000-0000-0000-000000000001",
                            Img = "",
                            Name = "Testgroep5"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            CreatorId = "00000000-0000-0000-0000-000000000001",
                            Img = "",
                            Name = "Testgroep6"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            CreatorId = "00000000-0000-0000-0000-000000000001",
                            Img = "",
                            Name = "Testgroep7"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.GroupMembers", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GroupId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("members");

                    b.HasData(
                        new
                        {
                            GroupId = new Guid("00000000-0000-0000-0000-000000000001"),
                            UserId = "00000000-0000-0000-0000-000000000001"
                        },
                        new
                        {
                            GroupId = new Guid("00000000-0000-0000-0000-000000000001"),
                            UserId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            GroupId = new Guid("00000000-0000-0000-0000-000000000001"),
                            UserId = "00000000-0000-0000-0000-000000000003"
                        },
                        new
                        {
                            GroupId = new Guid("00000000-0000-0000-0000-000000000001"),
                            UserId = "00000000-0000-0000-0000-000000000004"
                        },
                        new
                        {
                            GroupId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = "00000000-0000-0000-0000-000000000001"
                        },
                        new
                        {
                            GroupId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = "00000000-0000-0000-0000-000000000010"
                        },
                        new
                        {
                            GroupId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = "00000000-0000-0000-0000-000000000011"
                        },
                        new
                        {
                            GroupId = new Guid("00000000-0000-0000-0000-000000000003"),
                            UserId = "00000000-0000-0000-0000-000000000001"
                        },
                        new
                        {
                            GroupId = new Guid("00000000-0000-0000-0000-000000000003"),
                            UserId = "00000000-0000-0000-0000-000000000005"
                        },
                        new
                        {
                            GroupId = new Guid("00000000-0000-0000-0000-000000000003"),
                            UserId = "00000000-0000-0000-0000-000000000006"
                        },
                        new
                        {
                            GroupId = new Guid("00000000-0000-0000-0000-000000000003"),
                            UserId = "00000000-0000-0000-0000-000000000007"
                        },
                        new
                        {
                            GroupId = new Guid("00000000-0000-0000-0000-000000000003"),
                            UserId = "00000000-0000-0000-0000-000000000008"
                        },
                        new
                        {
                            GroupId = new Guid("00000000-0000-0000-0000-000000000003"),
                            UserId = "00000000-0000-0000-0000-000000000009"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Message", b =>
                {
                    b.Property<Guid>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastEditedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentTime")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageId");

                    b.HasIndex("GroupId");

                    b.HasIndex("SenderId");

                    b.ToTable("messages");

                    b.HasData(
                        new
                        {
                            MessageId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Content = "Hallo dit is een test",
                            GroupId = new Guid("00000000-0000-0000-0000-000000000001"),
                            SenderId = "00000000-0000-0000-0000-000000000001",
                            SentTime = new DateTime(2023, 6, 4, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            MessageId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Content = "Hallo dit is (g)een test",
                            GroupId = new Guid("00000000-0000-0000-0000-000000000001"),
                            SenderId = "00000000-0000-0000-0000-000000000002",
                            SentTime = new DateTime(2023, 6, 4, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            MessageId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Content = "Hallo dit is een test",
                            GroupId = new Guid("00000000-0000-0000-0000-000000000002"),
                            SenderId = "00000000-0000-0000-0000-000000000001",
                            SentTime = new DateTime(2023, 6, 4, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            MessageId = new Guid("00000000-0000-0000-0000-000000000004"),
                            Content = "Hallo dit is een test",
                            GroupId = new Guid("00000000-0000-0000-0000-000000000003"),
                            SenderId = "00000000-0000-0000-0000-000000000001",
                            SentTime = new DateTime(2023, 6, 4, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            MessageId = new Guid("00000000-0000-0000-0000-000000000005"),
                            Content = "Hallo",
                            GroupId = new Guid("00000000-0000-0000-0000-000000000001"),
                            SenderId = "00000000-0000-0000-0000-000000000003",
                            SentTime = new DateTime(2023, 6, 4, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            MessageId = new Guid("00000000-0000-0000-0000-000000000006"),
                            Content = "Hallo",
                            GroupId = new Guid("00000000-0000-0000-0000-000000000001"),
                            SenderId = "00000000-0000-0000-0000-000000000004",
                            SentTime = new DateTime(2023, 6, 4, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            MessageId = new Guid("00000000-0000-0000-0000-000000000007"),
                            Content = "Hallo",
                            GroupId = new Guid("00000000-0000-0000-0000-000000000003"),
                            SenderId = "00000000-0000-0000-0000-000000000005",
                            SentTime = new DateTime(2023, 6, 4, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            MessageId = new Guid("00000000-0000-0000-0000-000000000008"),
                            Content = "Hallo",
                            GroupId = new Guid("00000000-0000-0000-0000-000000000003"),
                            SenderId = "00000000-0000-0000-0000-000000000006",
                            SentTime = new DateTime(2023, 6, 4, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            MessageId = new Guid("00000000-0000-0000-0000-000000000009"),
                            Content = "Hallo",
                            GroupId = new Guid("00000000-0000-0000-0000-000000000003"),
                            SenderId = "00000000-0000-0000-0000-000000000007",
                            SentTime = new DateTime(2023, 6, 4, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            MessageId = new Guid("00000000-0000-0000-0000-000000000010"),
                            Content = "Hallo",
                            GroupId = new Guid("00000000-0000-0000-0000-000000000003"),
                            SenderId = "00000000-0000-0000-0000-000000000008",
                            SentTime = new DateTime(2023, 6, 4, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Admin", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Group", "Group")
                        .WithMany("Admins")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", "User")
                        .WithMany("Admins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Event", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", "Creator")
                        .WithMany("Events")
                        .HasForeignKey("CreatorId");

                    b.HasOne("Imi.Project.Api.Core.Entities.Group", "Group")
                        .WithMany("Events")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Group", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.GroupMembers", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Group", "Group")
                        .WithMany("GroupMembers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", "User")
                        .WithMany("GroupMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Message", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Group", "Group")
                        .WithMany("Messages")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId");

                    b.Navigation("Group");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("Events");

                    b.Navigation("GroupMembers");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Group", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("Events");

                    b.Navigation("GroupMembers");

                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
